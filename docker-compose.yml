version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: inventory_db
    environment:
      POSTGRES_DB: inventory_management
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: inventory_backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=inventory_management
      - DB_USER=inventory_user
      - DB_PASSWORD=inventory_pass
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
      - BCRYPT_ROUNDS=12
    depends_on:
      db:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.robust
    container_name: inventory_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - inventory_network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
    driver: local

networks:
  inventory_network:
    driver: bridge 