version: '3.8'

services:
  # Frontend Service (Production)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000/api
    depends_on:
      - backend
    networks:
      - inventory-network
    restart: unless-stopped

  # Backend Service (Production)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://inventory_user:inventory_pass@db:5432/inventory_management
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - BCRYPT_ROUNDS=12
    depends_on:
      - db
    networks:
      - inventory-network
    restart: unless-stopped
    volumes:
      - ../backend/uploads:/app/uploads

  # Database Service (Production)
  db:
    build:
      context: ../database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=inventory_management
      - POSTGRES_USER=inventory_user
      - POSTGRES_PASSWORD=inventory_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/migrations:/docker-entrypoint-initdb.d
    networks:
      - inventory-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - inventory-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  inventory-network:
    driver: bridge 